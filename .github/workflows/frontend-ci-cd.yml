name: Frontend CI/CD - Azure Static Web Apps

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'aviation-frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'aviation-frontend/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  WORKING_DIRECTORY: './aviation-frontend'

jobs:
  lint:
    name: 'Lint & Type Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: TypeScript Type Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc --noEmit

  test:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run Vitest
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.WORKING_DIRECTORY }}/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  e2e:
    name: 'E2E Tests (Playwright)'
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build frontend
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Run Playwright tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: ${{ env.WORKING_DIRECTORY }}/playwright-report/
          retention-days: 30

  lighthouse:
    name: 'Lighthouse CI'
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './aviation-frontend/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  build:
    name: 'Build & Deploy to Azure'
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build production bundle
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AZURE_AD_CLIENT_ID: ${{ secrets.VITE_AZURE_AD_CLIENT_ID }}
          VITE_AZURE_AD_TENANT_ID: ${{ secrets.VITE_AZURE_AD_TENANT_ID }}

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: './aviation-frontend'
          api_location: ''
          output_location: 'dist'
          skip_app_build: true

  notify:
    name: 'Notify Deployment'
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Frontend deployed successfully to Azure Static Web Apps"
          else
            echo "❌ Frontend deployment failed"
            exit 1
          fi
