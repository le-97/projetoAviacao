name: 🧪 Development Environment

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ develop ]

env:
  REGISTRY_NAME: aviationcomplianceacr
  IMAGE_NAME: aviation-compliance-api
  RESOURCE_GROUP: aviation-compliance-rg

jobs:
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest
        if [ -f requirements-production.txt ]; then
          pip install -r requirements-production.txt
        fi

    - name: 🎨 Quick Lint Check
      run: |
        # Quick formatting check
        black --check --diff . || echo "❌ Code formatting issues found"
        
        # Basic linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🧪 Quick Tests
      run: |
        # Run basic unit tests
        python -c "
        import sys
        sys.path.append('.')
        
        # Test basic imports
        try:
            import main_production
            print('✅ Main module imports successfully')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

    - name: 🏗️ Quick Build Test
      run: |
        # Test Docker build
        docker build -t test-build -f Dockerfile.production . --target builder
        echo "✅ Docker build successful"

  dev-deployment:
    name: 🚀 Deploy to Dev
    runs-on: ubuntu-latest
    needs: quick-validation
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🏗️ Build Dev Image
      run: |
        DEV_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:dev-${{ github.run_number }}"
        
        az acr login --name ${{ env.REGISTRY_NAME }}
        
        docker build \
          --tag $DEV_TAG \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VERSION="dev-${{ github.run_number }}" \
          --build-arg ENVIRONMENT=development \
          --file Dockerfile.production \
          .
        
        docker push $DEV_TAG
        
        echo "dev-image=$DEV_TAG" >> $GITHUB_ENV

    - name: 🚀 Deploy to Development
      run: |
        # Deploy to development container app (if exists)
        if az containerapp show --name "${{ env.CONTAINER_APP_NAME }}-dev" --resource-group ${{ env.RESOURCE_GROUP }} 2>/dev/null; then
          az containerapp update \
            --name "${{ env.CONTAINER_APP_NAME }}-dev" \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.dev-image }} \
            --set-env-vars \
              ENVIRONMENT=development \
              VERSION="dev-${{ github.run_number }}" \
              DEBUG=true
        else
          echo "Development container app not found, skipping deployment"
        fi

  pr-preview:
    name: 🔍 PR Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🧪 PR Validation
      run: |
        echo "🔍 Validating PR #${{ github.event.number }}"
        echo "📝 Title: ${{ github.event.pull_request.title }}"
        echo "👤 Author: ${{ github.event.pull_request.user.login }}"
        echo "🎯 Target: ${{ github.event.pull_request.base.ref }}"

    - name: 📊 PR Size Check
      run: |
        # Check PR size
        ADDITIONS=${{ github.event.pull_request.additions }}
        DELETIONS=${{ github.event.pull_request.deletions }}
        CHANGED_FILES=${{ github.event.pull_request.changed_files }}
        
        echo "📈 Lines added: $ADDITIONS"
        echo "📉 Lines deleted: $DELETIONS"
        echo "📁 Files changed: $CHANGED_FILES"
        
        # Warn if PR is too large
        if [ $CHANGED_FILES -gt 20 ] || [ $ADDITIONS -gt 1000 ]; then
          echo "⚠️ Large PR detected - consider breaking into smaller changes"
        fi

    - name: 🎨 Code Style Check
      run: |
        python -m pip install black flake8
        
        # Check formatting
        if ! black --check .; then
          echo "❌ Code formatting issues found"
          echo "💡 Run 'black .' to fix formatting"
        else
          echo "✅ Code formatting looks good"
        fi