name: 🚀 Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (for emergency deploys)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_NAME: aviationcomplianceacr
  IMAGE_NAME: aviation-compliance-api
  RESOURCE_GROUP: aviation-compliance-rg
  CONTAINER_APP_NAME: aviation-compliance-app
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # ========================================
  # STAGE 1: CODE QUALITY & SECURITY
  # ========================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect Changes
      id: changes
      run: |
        # Check if we should deploy based on changes
        if git diff --name-only ${{ github.event.before }}..HEAD | grep -E '\.(py|js|ts|tsx|json|yml|yaml|dockerfile)$' > /dev/null; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi
        
        # If it's a manual dispatch, always deploy
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        fi

    - name: 🏷️ Generate Version
      id: version
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          VERSION="prod-$(date +'%Y%m%d')-${{ github.run_number }}"
        else
          VERSION="dev-$(date +'%Y%m%d')-${{ github.run_number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety
        if [ -f requirements-production.txt ]; then
          pip install -r requirements-production.txt
        fi

    - name: 🎨 Code Formatting Check
      run: |
        echo "::group::Black Formatting"
        black --check --diff .
        echo "::endgroup::"
        
        echo "::group::Import Sorting"
        isort --check-only --diff .
        echo "::endgroup::"

    - name: 🔧 Linting
      run: |
        echo "::group::Flake8 Linting"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "::endgroup::"

    - name: 🛡️ Security Scan
      run: |
        echo "::group::Bandit Security Scan"
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
        echo "::endgroup::"
        
        echo "::group::Safety Check"
        safety check --json --output safety-report.json || true
        safety check || true
        echo "::endgroup::"

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ========================================
  # STAGE 2: TESTING
  # ========================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true' && !inputs.skip_tests
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -r requirements-production.txt

    - name: 🏃 Run Backend Tests
      run: |
        echo "::group::Unit Tests"
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        echo "::endgroup::"

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true' && !inputs.skip_tests
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        cd tests
        npm ci

    - name: 🧪 Run Tests
      run: |
        cd tests
        npm test -- --coverage --watchAll=false

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./tests/coverage
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: needs.code-quality.outputs.should-deploy == 'true' && !inputs.skip_tests
    
    services:
      api:
        image: python:3.9
        options: --health-cmd "curl -f http://localhost:8000/health" --health-interval 30s --health-timeout 10s --health-retries 5
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🚀 Start API Server
      run: |
        pip install -r requirements-production.txt
        python main_production.py &
        sleep 10

    - name: 🧪 Run Integration Tests
      run: |
        cd tests
        npm ci
        npm run test:integration

  # ========================================
  # STAGE 3: BUILD & SECURITY SCAN
  # ========================================
  build-and-scan:
    name: 🏗️ Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    if: needs.code-quality.outputs.should-deploy == 'true'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: 🏗️ Build and Push Image
      id: build
      run: |
        IMAGE_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}"
        LATEST_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        
        echo "Building image: $IMAGE_TAG"
        
        docker build \
          --platform linux/amd64 \
          --tag $IMAGE_TAG \
          --tag $LATEST_TAG \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VERSION=${{ needs.code-quality.outputs.version }} \
          --build-arg VCS_REF=${{ github.sha }} \
          --file Dockerfile.production \
          .
        
        docker push $IMAGE_TAG
        docker push $LATEST_TAG
        
        # Get image digest
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_TAG | cut -d'@' -f2)
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 🛡️ Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ========================================
  # STAGE 4: DEPLOYMENT
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests]
    if: needs.code-quality.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/develop' || inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🚀 Deploy to Staging
      run: |
        IMAGE_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}"
        
        az containerapp update \
          --name "${{ env.CONTAINER_APP_NAME }}-staging" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars \
            ENVIRONMENT=staging \
            VERSION=${{ needs.code-quality.outputs.version }} \
            BUILD_NUMBER=${{ github.run_number }}

    - name: 🏥 Health Check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30
        
        # Get the staging URL
        STAGING_URL=$(az containerapp show \
          --name "${{ env.CONTAINER_APP_NAME }}-staging" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        # Health check
        for i in {1..10}; do
          if curl -f https://$STAGING_URL/health; then
            echo "✅ Staging deployment successful!"
            break
          else
            echo "⏳ Attempt $i/10 failed, retrying..."
            sleep 10
          fi
        done

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests, deploy-staging]
    if: needs.code-quality.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 💾 Backup Current Version
      run: |
        echo "Creating backup of current production deployment..."
        
        CURRENT_IMAGE=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query 'properties.template.containers[0].image' \
          --output tsv)
        
        echo "current-image=$CURRENT_IMAGE" >> $GITHUB_ENV
        echo "Backed up current image: $CURRENT_IMAGE"

    - name: 🚀 Deploy to Production
      run: |
        IMAGE_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}"
        
        echo "Deploying $IMAGE_TAG to production..."
        
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars \
            ENVIRONMENT=production \
            VERSION=${{ needs.code-quality.outputs.version }} \
            BUILD_NUMBER=${{ github.run_number }}

    - name: 🏥 Production Health Check
      run: |
        echo "Waiting for production deployment to be ready..."
        sleep 60
        
        # Health check with retry logic
        for i in {1..15}; do
          if curl -f https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io/health; then
            echo "✅ Production deployment successful!"
            
            # Additional API validation
            echo "Running API validation..."
            curl -f https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io/aircraft/models
            curl -f https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io/compliance/authorities
            
            echo "🎉 Production deployment completed successfully!"
            exit 0
          else
            echo "⏳ Attempt $i/15 failed, retrying in 20 seconds..."
            sleep 20
          fi
        done
        
        echo "❌ Production deployment failed health check"
        exit 1

    - name: 🔄 Rollback on Failure
      if: failure()
      run: |
        echo "🚨 Rolling back to previous version: ${{ env.current-image }}"
        
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.current-image }}
        
        echo "✅ Rollback completed"

  # ========================================
  # STAGE 5: POST-DEPLOYMENT
  # ========================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install --with-deps

    - name: 🎭 Run E2E Tests
      run: |
        npx playwright test --project=chromium
      env:
        PLAYWRIGHT_BASE_URL: https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io

    - name: 📊 Upload E2E Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/

  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production, e2e-tests]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.code-quality.outputs.version }}
        release_name: Release ${{ needs.code-quality.outputs.version }}
        body: |
          ## 🚀 Aviation Compliance API Release ${{ needs.code-quality.outputs.version }}
          
          ### ✨ What's Changed
          - Deployed to production successfully
          - All tests passed
          - Security scans completed
          
          ### 🔗 Links
          - **Live Application:** https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io
          - **API Documentation:** https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io/docs
          - **Health Check:** https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io/health
          
          ### 📊 Metrics
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Docker Image: `${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}`
        draft: false
        prerelease: false

  # ========================================
  # STAGE 6: NOTIFICATIONS
  # ========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, e2e-tests, create-release]
    if: always()
    
    steps:
    - name: 📢 Success Notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "Application URL: https://aviation-compliance-app.graytree-b170d21d.eastus.azurecontainerapps.io"
        echo "Version: ${{ needs.code-quality.outputs.version }}"

    - name: 🚨 Failure Notification
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and consider rollback if necessary."