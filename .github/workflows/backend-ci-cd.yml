name: Backend CI/CD - Azure App Service

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  AZURE_WEBAPP_NAME: 'aviation-compliance-api'

jobs:
  lint:
    name: 'Lint & Type Check (Python)'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit
          pip install -r requirements.txt

      - name: Run Ruff linter
        run: ruff check src/ tests/

      - name: Run mypy type checker
        run: mypy src/ --ignore-missing-imports

      - name: Run Bandit security scanner
        run: bandit -r src/ -ll

  test:
    name: 'Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aviation_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run pytest with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aviation_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=html -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  docker:
    name: 'Build & Push Docker Image'
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/aviation-compliance-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/aviation-compliance-api:buildcache
          cache-to: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/aviation-compliance-api:buildcache,mode=max

  deploy:
    name: 'Deploy to Azure App Service'
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ secrets.ACR_LOGIN_SERVER }}/aviation-compliance-api:main-${{ github.sha }}

      - name: Azure Logout
        run: az logout

  smoke-test:
    name: 'Smoke Tests (Production)'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Health Check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status code: $response"
            exit 1
          fi

      - name: API Version Check
        run: |
          version=$(curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/version | jq -r '.version')
          echo "üì¶ Deployed version: $version"

  notify:
    name: 'Notify Deployment'
    runs-on: ubuntu-latest
    needs: [deploy, smoke-test]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.smoke-test.result }}" == "success" ]; then
            echo "‚úÖ Backend deployed successfully to Azure App Service"
          else
            echo "‚ùå Backend deployment or smoke tests failed"
            exit 1
          fi
