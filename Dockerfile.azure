# Multi-stage Dockerfile otimizado para Azure Container Apps
FROM python:3.11-slim AS builder

# Build arguments
ARG BUILD_DATE
ARG VERSION=2.0.0
ARG VCS_REF

# Labels para Azure
LABEL maintainer="Aviation Compliance Team"
LABEL org.opencontainers.image.title="Aviation Compliance API"
LABEL org.opencontainers.image.description="Microserviço de compliance aeronáutico com Prometheus"
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.source="https://github.com/le-97/projetoAviacao"

# Environment variables para build
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Working directory
WORKDIR /app

# Copy requirements
COPY requirements-azure.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-azure.txt

# Production stage
FROM python:3.11-slim AS production

# Production environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV API_HOST=0.0.0.0
ENV API_PORT=8000

# Azure-specific environment variables (will be set at runtime)
# ENV AZURE_CLIENT_ID=""
# ENV AZURE_CLIENT_SECRET=""  
# ENV AZURE_TENANT_ID=""
ENV WEBSITES_PORT=8000
ENV PORT=8000

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser -d /app appuser

# Working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser main_azure.py ./
COPY --chown=appuser:appuser requirements-azure.txt ./

# Create directories
RUN mkdir -p /app/logs /app/data /app/monitoring /app/temp && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Azure health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Switch to app user
USER appuser

# Expose port
EXPOSE 8000

# Startup command for Azure Container Apps
CMD ["python", "-m", "uvicorn", "main_azure:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--access-log", "--log-level", "info"]