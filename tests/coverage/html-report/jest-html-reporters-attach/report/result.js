window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":6,"numPassedTestSuites":0,"numPassedTests":0,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":6,"startTime":1759897305849,"success":false,"testResults":[{"numFailingTests":6,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1759897328191,"runtime":22233,"slow":true,"start":1759897305958},"testFilePath":"C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › GET /health › should return healthy status\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › GET /health › should have correct response headers\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › GET /health › should respond within acceptable time\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › GET / › should return API information\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › Health Check Reliability › should handle multiple concurrent requests\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mHealth Endpoints › Health Check Reliability › should maintain consistent response structure\u001b[39m\u001b[22m\n\n    API not ready after 10 attempts\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 49 |\u001b[39m         console\u001b[33m.\u001b[39mlog(\u001b[32m`⏳ API not ready, attempt ${attempt}/${maxAttempts}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m         \u001b[36mif\u001b[39m (attempt \u001b[33m===\u001b[39m maxAttempts) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 51 |\u001b[39m           \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`API not ready after ${maxAttempts} attempts`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         }\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m         \u001b[36mawait\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPromise\u001b[39m(resolve \u001b[33m=>\u001b[39m setTimeout(resolve\u001b[33m,\u001b[39m \u001b[35m2000\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 54 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.waitForAPI (\u001b[22m\u001b[2msetup.js\u001b[2m:51:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mintegration/health.test.js\u001b[39m\u001b[0m\u001b[2m:17:5)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Health Endpoints","GET /health"],"duration":5,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints GET /health should return healthy status","status":"failed","title":"should return healthy status"},{"ancestorTitles":["Health Endpoints","GET /health"],"duration":0,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints GET /health should have correct response headers","status":"failed","title":"should have correct response headers"},{"ancestorTitles":["Health Endpoints","GET /health"],"duration":0,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints GET /health should respond within acceptable time","status":"failed","title":"should respond within acceptable time"},{"ancestorTitles":["Health Endpoints","GET /"],"duration":0,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints GET / should return API information","status":"failed","title":"should return API information"},{"ancestorTitles":["Health Endpoints","Health Check Reliability"],"duration":0,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints Health Check Reliability should handle multiple concurrent requests","status":"failed","title":"should handle multiple concurrent requests"},{"ancestorTitles":["Health Endpoints","Health Check Reliability"],"duration":0,"failureMessages":["Error: API not ready after 10 attempts\n    at Object.waitForAPI (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\setup.js:51:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\integration\\health.test.js:17:5)"],"fullName":"Health Endpoints Health Check Reliability should maintain consistent response structure","status":"failed","title":"should maintain consistent response structure"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["src/**/*.py","main_azure_simple.py","!src/test/**","!**/node_modules/**"],"coverageDirectory":"C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\coverage","coverageProvider":"babel","coverageReporters":["text","lcov","html","json"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":4,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\node_modules\\jest-junit\\index.js",{}],["C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./coverage/html-report","filename":"report.html","expand":true}]],"rootDir":"C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests","runTestsByPath":false,"seed":1248202033,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"health","testSequencer":"C:\\Users\\lelem\\Documents\\github\\projetoAviacao\\tests\\node_modules\\@jest\\test-sequencer\\build\\index.js","testTimeout":30000,"updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1759897328220,"_reporterOptions":{"publicPath":"./coverage/html-report","filename":"report.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})